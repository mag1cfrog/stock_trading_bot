
# services:
#   spark-master:
#     image: docker.io/bitnami/spark:latest
#     command: bin/spark-class org.apache.spark.deploy.master.Master
#     ports:
#       # - "4040:4040"  # Spark application web UI
#       - "8080:8080"  # Spark master web UI
#       - "7077:7077"  # Spark master port
#     # environment:
#     #   - SPARK_MODE=master
#     #   - SPARK_MASTER_HOST=spark-master
#     #   - SPARK_LOCAL_IP=spark-master

#     # volumes:
#     #   - ./data/master:/opt/spark/data  # Mount a directory for the master's data access
#     networks:
#       - spark-network


#   spark-worker:
#     image: docker.io/bitnami/spark:latest
#     command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
#     environment:
#       - SPARK_MODE=worker
#       - SPARK_MASTER_URL=spark://spark-master:7077
#       - SPARK_WORKER_MEMORY=4G
#       - SPARK_WORKER_CORES=2

#     # volumes:
#     #   - ./data/worker:/opt/spark/data  # Mount a directory for the worker's data access
#     depends_on:
#       - spark-master
#     networks:
#       - spark-network

# networks:
#   spark-network:
    
services:
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      iceberg_net:
    depends_on:
      - rest
      - minio
    volumes:
      - ./data/warehouse:/home/iceberg/warehouse
      - ./notebooks/iceberg:/home/iceberg/notebooks/notebooks
      # - ./jars/iceberg-spark3-runtime-0.12.0.jar:/opt/spark/jars/iceberg-spark3-runtime-0.12.0.jar
      - ./extra-jars:/opt/spark/extra-jars  # Mount the directory with the AWS SDK jar
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - SPARK_EXTRA_CLASSPATH=/opt/spark/extra-jars/*
    ports:
      - 7077:7077 # Spark master port
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      iceberg_net:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
networks:
  iceberg_net: